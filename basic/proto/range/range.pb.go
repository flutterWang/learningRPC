// Code generated by protoc-gen-go. DO NOT EDIT.
// source: range.proto

package _range

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Res struct {
	R                    []*Range `protobuf:"bytes,1,rep,name=r,proto3" json:"r,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Res) Reset()         { *m = Res{} }
func (m *Res) String() string { return proto.CompactTextString(m) }
func (*Res) ProtoMessage()    {}
func (*Res) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4e1a46defc62fd, []int{0}
}

func (m *Res) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Res.Unmarshal(m, b)
}
func (m *Res) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Res.Marshal(b, m, deterministic)
}
func (m *Res) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Res.Merge(m, src)
}
func (m *Res) XXX_Size() int {
	return xxx_messageInfo_Res.Size(m)
}
func (m *Res) XXX_DiscardUnknown() {
	xxx_messageInfo_Res.DiscardUnknown(m)
}

var xxx_messageInfo_Res proto.InternalMessageInfo

func (m *Res) GetR() []*Range {
	if m != nil {
		return m.R
	}
	return nil
}

type Range struct {
	Start                int32    `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	Stop                 int32    `protobuf:"varint,2,opt,name=stop,proto3" json:"stop,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4e1a46defc62fd, []int{1}
}

func (m *Range) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Range.Unmarshal(m, b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Range.Marshal(b, m, deterministic)
}
func (m *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(m, src)
}
func (m *Range) XXX_Size() int {
	return xxx_messageInfo_Range.Size(m)
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Range) GetStop() int32 {
	if m != nil {
		return m.Stop
	}
	return 0
}

type Chunk struct {
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a4e1a46defc62fd, []int{2}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func init() {
	proto.RegisterType((*Res)(nil), "range.Res")
	proto.RegisterType((*Range)(nil), "range.Range")
	proto.RegisterType((*Chunk)(nil), "range.Chunk")
}

func init() {
	proto.RegisterFile("range.proto", fileDescriptor_2a4e1a46defc62fd)
}

var fileDescriptor_2a4e1a46defc62fd = []byte{
	// 204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x8f, 0xbd, 0x6a, 0x86, 0x30,
	0x14, 0x86, 0x9b, 0xda, 0x74, 0x38, 0x3a, 0x85, 0x0e, 0x22, 0x14, 0x6c, 0xa0, 0xe0, 0x64, 0x5a,
	0xfb, 0x73, 0x01, 0xf5, 0x06, 0x4a, 0x96, 0x42, 0xb7, 0x28, 0x69, 0x94, 0xfa, 0x25, 0x72, 0x12,
	0xef, 0xff, 0xc3, 0x23, 0x2e, 0xe1, 0x7d, 0xc2, 0xfb, 0x93, 0x40, 0x8e, 0xc6, 0x3b, 0xdb, 0xae,
	0x18, 0x52, 0x10, 0x9c, 0x40, 0x3e, 0x41, 0xa6, 0x6d, 0x14, 0x15, 0x30, 0x2c, 0x59, 0x9d, 0x35,
	0x79, 0x57, 0xb4, 0x87, 0x4d, 0xef, 0xa7, 0x66, 0x28, 0x5f, 0x81, 0x93, 0x16, 0x0f, 0xc0, 0x63,
	0x32, 0x98, 0x4a, 0x56, 0xb3, 0x86, 0xeb, 0x03, 0x84, 0x80, 0xbb, 0x98, 0xc2, 0x5a, 0xde, 0xd2,
	0x25, 0x69, 0xf9, 0x08, 0xbc, 0x9f, 0x36, 0xff, 0xbf, 0x47, 0xc6, 0x5d, 0x50, 0xa4, 0xd0, 0x07,
	0x74, 0x1f, 0x50, 0x50, 0x23, 0x79, 0x2c, 0x8a, 0xe7, 0x73, 0x01, 0xce, 0x6d, 0x1b, 0xab, 0xf3,
	0x1d, 0x64, 0x92, 0x37, 0x2f, 0xec, 0xeb, 0xf3, 0xf7, 0xdd, 0xcd, 0x69, 0xda, 0x86, 0x76, 0x0c,
	0x17, 0xf5, 0xb7, 0x6c, 0x29, 0x59, 0xfc, 0x31, 0xde, 0xa9, 0xc5, 0x1a, 0xf4, 0xb3, 0x77, 0xfa,
	0xbb, 0x57, 0x83, 0x89, 0xf3, 0xa8, 0xe8, 0x93, 0x8a, 0x1a, 0x86, 0x7b, 0x82, 0xb7, 0x6b, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xc8, 0xf6, 0xdd, 0x75, 0x00, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RangeChunkerClient is the client API for RangeChunker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RangeChunkerClient interface {
	Range(ctx context.Context, in *Res, opts ...grpc.CallOption) (RangeChunker_RangeClient, error)
}

type rangeChunkerClient struct {
	cc grpc.ClientConnInterface
}

func NewRangeChunkerClient(cc grpc.ClientConnInterface) RangeChunkerClient {
	return &rangeChunkerClient{cc}
}

func (c *rangeChunkerClient) Range(ctx context.Context, in *Res, opts ...grpc.CallOption) (RangeChunker_RangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RangeChunker_serviceDesc.Streams[0], "/range.RangeChunker/Range", opts...)
	if err != nil {
		return nil, err
	}
	x := &rangeChunkerRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RangeChunker_RangeClient interface {
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type rangeChunkerRangeClient struct {
	grpc.ClientStream
}

func (x *rangeChunkerRangeClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RangeChunkerServer is the server API for RangeChunker service.
type RangeChunkerServer interface {
	Range(*Res, RangeChunker_RangeServer) error
}

// UnimplementedRangeChunkerServer can be embedded to have forward compatible implementations.
type UnimplementedRangeChunkerServer struct {
}

func (*UnimplementedRangeChunkerServer) Range(req *Res, srv RangeChunker_RangeServer) error {
	return status.Errorf(codes.Unimplemented, "method Range not implemented")
}

func RegisterRangeChunkerServer(s *grpc.Server, srv RangeChunkerServer) {
	s.RegisterService(&_RangeChunker_serviceDesc, srv)
}

func _RangeChunker_Range_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Res)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RangeChunkerServer).Range(m, &rangeChunkerRangeServer{stream})
}

type RangeChunker_RangeServer interface {
	Send(*Chunk) error
	grpc.ServerStream
}

type rangeChunkerRangeServer struct {
	grpc.ServerStream
}

func (x *rangeChunkerRangeServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

var _RangeChunker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "range.RangeChunker",
	HandlerType: (*RangeChunkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Range",
			Handler:       _RangeChunker_Range_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "range.proto",
}
