// Code generated by protoc-gen-go. DO NOT EDIT.
// source: basic/proto/stream/stream.proto

package stream

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//stream请求结构
type StreamReq struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamReq) Reset()         { *m = StreamReq{} }
func (m *StreamReq) String() string { return proto.CompactTextString(m) }
func (*StreamReq) ProtoMessage()    {}
func (*StreamReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_b09bcfbdfa5dabd0, []int{0}
}

func (m *StreamReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamReq.Unmarshal(m, b)
}
func (m *StreamReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamReq.Marshal(b, m, deterministic)
}
func (m *StreamReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamReq.Merge(m, src)
}
func (m *StreamReq) XXX_Size() int {
	return xxx_messageInfo_StreamReq.Size(m)
}
func (m *StreamReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamReq.DiscardUnknown(m)
}

var xxx_messageInfo_StreamReq proto.InternalMessageInfo

func (m *StreamReq) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

//stream返回结构
type StreamResp struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamResp) Reset()         { *m = StreamResp{} }
func (m *StreamResp) String() string { return proto.CompactTextString(m) }
func (*StreamResp) ProtoMessage()    {}
func (*StreamResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_b09bcfbdfa5dabd0, []int{1}
}

func (m *StreamResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamResp.Unmarshal(m, b)
}
func (m *StreamResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamResp.Marshal(b, m, deterministic)
}
func (m *StreamResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamResp.Merge(m, src)
}
func (m *StreamResp) XXX_Size() int {
	return xxx_messageInfo_StreamResp.Size(m)
}
func (m *StreamResp) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamResp.DiscardUnknown(m)
}

var xxx_messageInfo_StreamResp proto.InternalMessageInfo

func (m *StreamResp) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*StreamReq)(nil), "stream.StreamReq")
	proto.RegisterType((*StreamResp)(nil), "stream.StreamResp")
}

func init() {
	proto.RegisterFile("basic/proto/stream/stream.proto", fileDescriptor_b09bcfbdfa5dabd0)
}

var fileDescriptor_b09bcfbdfa5dabd0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0x4a, 0x2c, 0xce,
	0x4c, 0xd6, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x85, 0x52,
	0x7a, 0x60, 0x31, 0x21, 0x36, 0x08, 0x4f, 0x49, 0x9e, 0x8b, 0x33, 0x18, 0xcc, 0x0a, 0x4a, 0x2d,
	0x14, 0x12, 0xe2, 0x62, 0x49, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x02,
	0xb3, 0x95, 0x14, 0xb8, 0xb8, 0x60, 0x0a, 0x8a, 0x0b, 0xb0, 0xa9, 0x30, 0xda, 0xc4, 0xc8, 0xc5,
	0x06, 0x51, 0x22, 0x64, 0xc6, 0xc5, 0xe9, 0x9e, 0x5a, 0x02, 0xe5, 0x08, 0xea, 0x41, 0x6d, 0x84,
	0x5b, 0x20, 0x25, 0x84, 0x2e, 0x54, 0x5c, 0xa0, 0xc4, 0x60, 0xc0, 0x08, 0xd2, 0x17, 0x50, 0x4a,
	0xaa, 0x3e, 0x0d, 0x46, 0x21, 0x0b, 0x2e, 0x4e, 0xc7, 0x9c, 0x1c, 0x92, 0xf5, 0x19, 0x30, 0x3a,
	0x99, 0x47, 0x99, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xa7, 0xe5,
	0x94, 0x96, 0x94, 0xa4, 0x16, 0x85, 0x27, 0xe6, 0xa5, 0xeb, 0xe7, 0xa4, 0x26, 0x16, 0xe5, 0x65,
	0xe6, 0xa5, 0x07, 0x05, 0x38, 0xeb, 0x63, 0x86, 0x62, 0x12, 0x1b, 0x98, 0x67, 0x0c, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x38, 0x49, 0x40, 0xe4, 0x62, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	GetStream(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (Stream_GetStreamClient, error)
	PutStream(ctx context.Context, opts ...grpc.CallOption) (Stream_PutStreamClient, error)
	AllStream(ctx context.Context, opts ...grpc.CallOption) (Stream_AllStreamClient, error)
}

type streamClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamClient(cc grpc.ClientConnInterface) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) GetStream(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (Stream_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/stream.Stream/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stream_GetStreamClient interface {
	Recv() (*StreamResp, error)
	grpc.ClientStream
}

type streamGetStreamClient struct {
	grpc.ClientStream
}

func (x *streamGetStreamClient) Recv() (*StreamResp, error) {
	m := new(StreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) PutStream(ctx context.Context, opts ...grpc.CallOption) (Stream_PutStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[1], "/stream.Stream/PutStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamPutStreamClient{stream}
	return x, nil
}

type Stream_PutStreamClient interface {
	Send(*StreamReq) error
	CloseAndRecv() (*StreamResp, error)
	grpc.ClientStream
}

type streamPutStreamClient struct {
	grpc.ClientStream
}

func (x *streamPutStreamClient) Send(m *StreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamPutStreamClient) CloseAndRecv() (*StreamResp, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *streamClient) AllStream(ctx context.Context, opts ...grpc.CallOption) (Stream_AllStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[2], "/stream.Stream/AllStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamAllStreamClient{stream}
	return x, nil
}

type Stream_AllStreamClient interface {
	Send(*StreamReq) error
	Recv() (*StreamResp, error)
	grpc.ClientStream
}

type streamAllStreamClient struct {
	grpc.ClientStream
}

func (x *streamAllStreamClient) Send(m *StreamReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamAllStreamClient) Recv() (*StreamResp, error) {
	m := new(StreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	GetStream(*StreamReq, Stream_GetStreamServer) error
	PutStream(Stream_PutStreamServer) error
	AllStream(Stream_AllStreamServer) error
}

// UnimplementedStreamServer can be embedded to have forward compatible implementations.
type UnimplementedStreamServer struct {
}

func (*UnimplementedStreamServer) GetStream(req *StreamReq, srv Stream_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (*UnimplementedStreamServer) PutStream(srv Stream_PutStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PutStream not implemented")
}
func (*UnimplementedStreamServer) AllStream(srv Stream_AllStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AllStream not implemented")
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).GetStream(m, &streamGetStreamServer{stream})
}

type Stream_GetStreamServer interface {
	Send(*StreamResp) error
	grpc.ServerStream
}

type streamGetStreamServer struct {
	grpc.ServerStream
}

func (x *streamGetStreamServer) Send(m *StreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Stream_PutStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).PutStream(&streamPutStreamServer{stream})
}

type Stream_PutStreamServer interface {
	SendAndClose(*StreamResp) error
	Recv() (*StreamReq, error)
	grpc.ServerStream
}

type streamPutStreamServer struct {
	grpc.ServerStream
}

func (x *streamPutStreamServer) SendAndClose(m *StreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamPutStreamServer) Recv() (*StreamReq, error) {
	m := new(StreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Stream_AllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamServer).AllStream(&streamAllStreamServer{stream})
}

type Stream_AllStreamServer interface {
	Send(*StreamResp) error
	Recv() (*StreamReq, error)
	grpc.ServerStream
}

type streamAllStreamServer struct {
	grpc.ServerStream
}

func (x *streamAllStreamServer) Send(m *StreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamAllStreamServer) Recv() (*StreamReq, error) {
	m := new(StreamReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _Stream_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutStream",
			Handler:       _Stream_PutStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AllStream",
			Handler:       _Stream_AllStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "basic/proto/stream/stream.proto",
}
