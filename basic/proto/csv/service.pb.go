// Code generated by protoc-gen-go. DO NOT EDIT.
// source: basic/proto/csv/service.proto

package csv

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing the filePath and tableName
type UploadRequest struct {
	File                 []byte   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadRequest) Reset()         { *m = UploadRequest{} }
func (m *UploadRequest) String() string { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()    {}
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_301c6183e91af696, []int{0}
}

func (m *UploadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadRequest.Unmarshal(m, b)
}
func (m *UploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadRequest.Marshal(b, m, deterministic)
}
func (m *UploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRequest.Merge(m, src)
}
func (m *UploadRequest) XXX_Size() int {
	return xxx_messageInfo_UploadRequest.Size(m)
}
func (m *UploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRequest proto.InternalMessageInfo

func (m *UploadRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *UploadRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// The response message containing the
type UploadResponse struct {
	Code                 int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadResponse) Reset()         { *m = UploadResponse{} }
func (m *UploadResponse) String() string { return proto.CompactTextString(m) }
func (*UploadResponse) ProtoMessage()    {}
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_301c6183e91af696, []int{1}
}

func (m *UploadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadResponse.Unmarshal(m, b)
}
func (m *UploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadResponse.Marshal(b, m, deterministic)
}
func (m *UploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResponse.Merge(m, src)
}
func (m *UploadResponse) XXX_Size() int {
	return xxx_messageInfo_UploadResponse.Size(m)
}
func (m *UploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResponse proto.InternalMessageInfo

func (m *UploadResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UploadResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*UploadRequest)(nil), "csv.UploadRequest")
	proto.RegisterType((*UploadResponse)(nil), "csv.UploadResponse")
}

func init() {
	proto.RegisterFile("basic/proto/csv/service.proto", fileDescriptor_301c6183e91af696)
}

var fileDescriptor_301c6183e91af696 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x8f, 0x3f, 0x4b, 0xc6, 0x30,
	0x10, 0x87, 0xad, 0xaf, 0xbe, 0x62, 0x50, 0x87, 0xb8, 0x14, 0x41, 0x78, 0xe9, 0xd4, 0x29, 0x81,
	0x56, 0x10, 0x1c, 0x1c, 0xec, 0x17, 0x90, 0x80, 0x08, 0x6e, 0x69, 0x7a, 0x8d, 0x81, 0x34, 0xa9,
	0xb9, 0x34, 0x9f, 0x5f, 0x4c, 0xe9, 0x50, 0xb7, 0xe7, 0x7e, 0xdc, 0x73, 0x7f, 0xc8, 0x63, 0x2f,
	0xd1, 0x28, 0x3e, 0x07, 0x1f, 0x3d, 0x57, 0x98, 0x38, 0x42, 0x48, 0x46, 0x01, 0xcb, 0x09, 0x3d,
	0x28, 0x4c, 0xd5, 0x33, 0xb9, 0xfd, 0x98, 0xad, 0x97, 0x83, 0x80, 0x9f, 0x05, 0x30, 0x52, 0x4a,
	0x2e, 0x46, 0x63, 0xa1, 0x2c, 0x4e, 0x45, 0x7d, 0x23, 0x32, 0xff, 0x65, 0x4e, 0x4e, 0x50, 0x9e,
	0x9f, 0x8a, 0xfa, 0x5a, 0x64, 0xae, 0x5e, 0xc9, 0xdd, 0x26, 0xe2, 0xec, 0x1d, 0xe6, 0x2e, 0xe5,
	0x87, 0xd5, 0xbc, 0x14, 0x99, 0x69, 0x49, 0xae, 0x26, 0x40, 0x94, 0x7a, 0x93, 0xb7, 0xb2, 0x79,
	0x21, 0x87, 0x0e, 0x13, 0x6d, 0xc9, 0x71, 0x1d, 0x43, 0x29, 0x53, 0x98, 0xd8, 0xee, 0x98, 0x87,
	0xfb, 0x5d, 0xb6, 0xee, 0xa9, 0xce, 0xde, 0x9e, 0xbe, 0x1a, 0x6d, 0xe2, 0xf7, 0xd2, 0x33, 0xe5,
	0x27, 0x3e, 0xda, 0x25, 0x46, 0x08, 0x9f, 0xd2, 0x69, 0x6e, 0x41, 0x06, 0x67, 0x9c, 0x16, 0xef,
	0x1d, 0xff, 0xf7, 0x7d, 0x7f, 0xcc, 0xd8, 0xfe, 0x06, 0x00, 0x00, 0xff, 0xff, 0xec, 0x73, 0x25,
	0xcd, 0x17, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CsvClient is the client API for Csv service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CsvClient interface {
	// Sends a greeting
	Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
}

type csvClient struct {
	cc grpc.ClientConnInterface
}

func NewCsvClient(cc grpc.ClientConnInterface) CsvClient {
	return &csvClient{cc}
}

func (c *csvClient) Upload(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/csv.Csv/Upload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CsvServer is the server API for Csv service.
type CsvServer interface {
	// Sends a greeting
	Upload(context.Context, *UploadRequest) (*UploadResponse, error)
}

// UnimplementedCsvServer can be embedded to have forward compatible implementations.
type UnimplementedCsvServer struct {
}

func (*UnimplementedCsvServer) Upload(ctx context.Context, req *UploadRequest) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}

func RegisterCsvServer(s *grpc.Server, srv CsvServer) {
	s.RegisterService(&_Csv_serviceDesc, srv)
}

func _Csv_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CsvServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/csv.Csv/Upload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CsvServer).Upload(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Csv_serviceDesc = grpc.ServiceDesc{
	ServiceName: "csv.Csv",
	HandlerType: (*CsvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _Csv_Upload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "basic/proto/csv/service.proto",
}
